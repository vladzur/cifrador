<?php
use \Vladzur\Cifrador\Cifrador;

/**
 * Created by vladzur.
 * Date: 21-12-15
 * Time: 19:20
 */
class CifradorTest extends PHPUnit_Framework_TestCase
{

    public function test_encrypt_text()
    {
        $cypher = new Cifrador();
        $text = "Hola Mundo";
        $encrypted = $cypher->encrypt($text, 's3cr3tp4ssw0rd');
        return $this->assertFalse($text === $encrypted);
    }

    public function test_decrypt_text()
    {
        $cypher = new Cifrador();
        $text = "This is a secret message";
        $encrypted = $cypher->encrypt($text, 's3cr3tp4ssw0rd');
        $decrypted_text = $cypher->decrypt($encrypted, 's3cr3tp4ssw0rd');
        return $this->assertEquals($text, $decrypted_text);
    }

    public function test_wrong_password()
    {
        $cypher = new Cifrador();
        $text = "This is a secret message";
        $encrypted = $cypher->encrypt($text, 's3cr3tp4ssw0rd');
        $decrypted_text = $cypher->decrypt($encrypted, 'secr3tp4ssw0rd');
        return $this->assertFalse($text == $decrypted_text);
    }

    public function test_encrypt_long_text()
    {
        $text = "";
        $cypher = new Cifrador();
        $encrypted = $cypher->encrypt($text, 's3cr3tp4ssw0rd');
        $decrypted = $cypher->decrypt($encrypted, 's3cr3tp4ssw0rd');
        return $this->assertEquals($text, $decrypted);
    }
}
